// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/romandnk/crud/internal/entities"
)

// MockTasker is a mock of Tasker interface.
type MockTasker struct {
	ctrl     *gomock.Controller
	recorder *MockTaskerMockRecorder
}

// MockTaskerMockRecorder is the mock recorder for MockTasker.
type MockTaskerMockRecorder struct {
	mock *MockTasker
}

// NewMockTasker creates a new mock instance.
func NewMockTasker(ctrl *gomock.Controller) *MockTasker {
	mock := &MockTasker{ctrl: ctrl}
	mock.recorder = &MockTaskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasker) EXPECT() *MockTaskerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTasker) Create(ctx context.Context, task entities.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskerMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTasker)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockTasker) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTasker)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockTasker) GetAll(ctx context.Context) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTasker)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockTasker) GetById(ctx context.Context, id int) (entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTaskerMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTasker)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockTasker) Update(ctx context.Context, id int, task entities.Task) (entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, task)
	ret0, _ := ret[0].(entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskerMockRecorder) Update(ctx, id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTasker)(nil).Update), ctx, id, task)
}
